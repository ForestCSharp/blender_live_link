// blender_live_link.fbs
// Flatbuffers IDL file for blender live link
 
namespace Blender.LiveLink;

struct Vec2
{
	x : float;
	y : float;
}

struct Vec3 
{
  x	: float;
  y	: float;
  z	: float;
}

struct Vec4 
{
  x	: float;
  y	: float;
  z	: float;
  w	: float;
}

struct Quat 
{
  x	: float;
  y	: float;
  z	: float;
  w	: float;
}

table Matrix
{
	elements : [float];
}

table Mesh
{
	// Basic Geometric Data
	positions		: [float];	// 3 components per vert (X,Y,Z)
	normals			: [float];	// 3 components per vert (X,Y,Z)
	texcoords		: [float];	// 2 components per vert (U,V)

	// Index Buffer
	indices			: [uint];	// 1 index per vert

	// Optional Skinning Data
	joint_indices	: [int];	// 4 joint indices per vert
	joint_weights	: [int];	// 4 joint weights per vert

	// Material Data
	material_ids	: [int];	

	// Armature this mesh is bound to
	armature_id		: int = -1;
}

table Bone
{
	name				: string;
	parent_name			: string;
	inverse_bind_matrix	: Matrix;
}

table Armature
{
	bones : [Bone];
}

struct RigidBody
{
	// Does this rigid body actively participate in the simulation?
	is_dynamic	: bool;

	// Mass in kg
	mass		: float;

	//TODO: Shape Enum or Shape Union
}

enum LightType : byte
{ 
	Point	= 0,
	Spot	= 1,
	Sun		= 2, 
	Area 	= 3,
}

struct PointLight
{
	// power in watts
	power : float;
}

struct SpotLight
{
	// power in watts
	power		: float;

	// Beam Angle in Radians 
	beam_angle	: float;

	// Softness of Spotlight Edge (0.0 - 1.0)
	edge_blend	: float;
}

struct SunLight
{
	// power in watts
	power			: float;

	// does this sunlight cast shadows?
	cast_shadows	: bool;
}

//TODO: AreaLight

table Light 
{
	type		: LightType;
	color 		: Vec3;
	use_shadow 	: bool;

	point_light	: PointLight;
	spot_light  : SpotLight;
	sun_light 	: SunLight;
}

table GameplayComponentCharacter
{
	player_controlled	: bool;
	move_speed			: float;
	jump_speed			: float;
}

table GameplayComponentCameraControl
{
	follow_distance 	: float;
	follow_speed		: float;
}

// TODO: Other Gameplay Components

union GameplayComponent
{
	GameplayComponentCharacter,
	GameplayComponentCameraControl
}

table GameplayComponentContainer
{
	value : GameplayComponent;
}

table Object 
{
	name		: string;
	unique_id	: int;
	visibility	: bool;

	// transform information
	location	: Vec3;
	scale		: Vec3;
	rotation	: Quat;

	// optional mesh data
	mesh		: Mesh;

	// optional armature data
	armature 	: Armature;

	// optional rigid body data
	rigid_body  : RigidBody;

	// optional light data
	light 		: Light;

	// array of gameplay components
	components	: [GameplayComponentContainer];
}

table Material
{
	unique_id	: int;
	name		: string;

	base_color			: Vec4;
	base_color_image_id	: int; 

	metallic			: float;
	metallic_image_id	: int;

	roughness			: float;
	roughness_image_id	: int;
}

table Image
{
	unique_id	: int;
	width		: int;
	height		: int;
	data		: [ubyte];
}

table Update 
{
	objects				: [Object];
	deleted_object_uids : [int];
	materials			: [Material];
	images				: [Image];
	reset 				: bool = false;
}

root_type Update;
