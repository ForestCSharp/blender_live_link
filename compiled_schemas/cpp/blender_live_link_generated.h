// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BLENDERLIVELINK_BLENDER_LIVELINK_H_
#define FLATBUFFERS_GENERATED_BLENDERLIVELINK_BLENDER_LIVELINK_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace Blender {
namespace LiveLink {

struct Vec3;

struct Vec4;

struct Quat;

struct Vertex;

struct Mesh;
struct MeshBuilder;

struct Object;
struct ObjectBuilder;

struct Update;
struct UpdateBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec4 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;
  float w_;

 public:
  Vec4()
      : x_(0),
        y_(0),
        z_(0),
        w_(0) {
  }
  Vec4(float _x, float _y, float _z, float _w)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)),
        w_(::flatbuffers::EndianScalar(_w)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
  float w() const {
    return ::flatbuffers::EndianScalar(w_);
  }
};
FLATBUFFERS_STRUCT_END(Vec4, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Quat FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;
  float w_;

 public:
  Quat()
      : x_(0),
        y_(0),
        z_(0),
        w_(0) {
  }
  Quat(float _x, float _y, float _z, float _w)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)),
        w_(::flatbuffers::EndianScalar(_w)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
  float w() const {
    return ::flatbuffers::EndianScalar(w_);
  }
};
FLATBUFFERS_STRUCT_END(Quat, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vertex FLATBUFFERS_FINAL_CLASS {
 private:
  Blender::LiveLink::Vec4 position_;
  Blender::LiveLink::Vec4 normal_;

 public:
  Vertex()
      : position_(),
        normal_() {
  }
  Vertex(const Blender::LiveLink::Vec4 &_position, const Blender::LiveLink::Vec4 &_normal)
      : position_(_position),
        normal_(_normal) {
  }
  const Blender::LiveLink::Vec4 &position() const {
    return position_;
  }
  const Blender::LiveLink::Vec4 &normal() const {
    return normal_;
  }
};
FLATBUFFERS_STRUCT_END(Vertex, 32);

struct Mesh FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MeshBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTICES = 4,
    VT_INDICES = 6
  };
  const ::flatbuffers::Vector<const Blender::LiveLink::Vertex *> *vertices() const {
    return GetPointer<const ::flatbuffers::Vector<const Blender::LiveLink::Vertex *> *>(VT_VERTICES);
  }
  const ::flatbuffers::Vector<uint32_t> *indices() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_INDICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           verifier.EndTable();
  }
};

struct MeshBuilder {
  typedef Mesh Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vertices(::flatbuffers::Offset<::flatbuffers::Vector<const Blender::LiveLink::Vertex *>> vertices) {
    fbb_.AddOffset(Mesh::VT_VERTICES, vertices);
  }
  void add_indices(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices) {
    fbb_.AddOffset(Mesh::VT_INDICES, indices);
  }
  explicit MeshBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Mesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Mesh>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Mesh> CreateMesh(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const Blender::LiveLink::Vertex *>> vertices = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices = 0) {
  MeshBuilder builder_(_fbb);
  builder_.add_indices(indices);
  builder_.add_vertices(vertices);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Mesh> CreateMeshDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<Blender::LiveLink::Vertex> *vertices = nullptr,
    const std::vector<uint32_t> *indices = nullptr) {
  auto vertices__ = vertices ? _fbb.CreateVectorOfStructs<Blender::LiveLink::Vertex>(*vertices) : 0;
  auto indices__ = indices ? _fbb.CreateVector<uint32_t>(*indices) : 0;
  return Blender::LiveLink::CreateMesh(
      _fbb,
      vertices__,
      indices__);
}

struct Object FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_UNIQUE_ID = 6,
    VT_VISIBILITY = 8,
    VT_LOCATION = 10,
    VT_SCALE = 12,
    VT_ROTATION = 14,
    VT_MESH = 16
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int32_t unique_id() const {
    return GetField<int32_t>(VT_UNIQUE_ID, 0);
  }
  bool visibility() const {
    return GetField<uint8_t>(VT_VISIBILITY, 0) != 0;
  }
  const Blender::LiveLink::Vec3 *location() const {
    return GetStruct<const Blender::LiveLink::Vec3 *>(VT_LOCATION);
  }
  const Blender::LiveLink::Vec3 *scale() const {
    return GetStruct<const Blender::LiveLink::Vec3 *>(VT_SCALE);
  }
  const Blender::LiveLink::Quat *rotation() const {
    return GetStruct<const Blender::LiveLink::Quat *>(VT_ROTATION);
  }
  const Blender::LiveLink::Mesh *mesh() const {
    return GetPointer<const Blender::LiveLink::Mesh *>(VT_MESH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_UNIQUE_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_VISIBILITY, 1) &&
           VerifyField<Blender::LiveLink::Vec3>(verifier, VT_LOCATION, 4) &&
           VerifyField<Blender::LiveLink::Vec3>(verifier, VT_SCALE, 4) &&
           VerifyField<Blender::LiveLink::Quat>(verifier, VT_ROTATION, 4) &&
           VerifyOffset(verifier, VT_MESH) &&
           verifier.VerifyTable(mesh()) &&
           verifier.EndTable();
  }
};

struct ObjectBuilder {
  typedef Object Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Object::VT_NAME, name);
  }
  void add_unique_id(int32_t unique_id) {
    fbb_.AddElement<int32_t>(Object::VT_UNIQUE_ID, unique_id, 0);
  }
  void add_visibility(bool visibility) {
    fbb_.AddElement<uint8_t>(Object::VT_VISIBILITY, static_cast<uint8_t>(visibility), 0);
  }
  void add_location(const Blender::LiveLink::Vec3 *location) {
    fbb_.AddStruct(Object::VT_LOCATION, location);
  }
  void add_scale(const Blender::LiveLink::Vec3 *scale) {
    fbb_.AddStruct(Object::VT_SCALE, scale);
  }
  void add_rotation(const Blender::LiveLink::Quat *rotation) {
    fbb_.AddStruct(Object::VT_ROTATION, rotation);
  }
  void add_mesh(::flatbuffers::Offset<Blender::LiveLink::Mesh> mesh) {
    fbb_.AddOffset(Object::VT_MESH, mesh);
  }
  explicit ObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Object> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Object>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Object> CreateObject(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int32_t unique_id = 0,
    bool visibility = false,
    const Blender::LiveLink::Vec3 *location = nullptr,
    const Blender::LiveLink::Vec3 *scale = nullptr,
    const Blender::LiveLink::Quat *rotation = nullptr,
    ::flatbuffers::Offset<Blender::LiveLink::Mesh> mesh = 0) {
  ObjectBuilder builder_(_fbb);
  builder_.add_mesh(mesh);
  builder_.add_rotation(rotation);
  builder_.add_scale(scale);
  builder_.add_location(location);
  builder_.add_unique_id(unique_id);
  builder_.add_name(name);
  builder_.add_visibility(visibility);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Object> CreateObjectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t unique_id = 0,
    bool visibility = false,
    const Blender::LiveLink::Vec3 *location = nullptr,
    const Blender::LiveLink::Vec3 *scale = nullptr,
    const Blender::LiveLink::Quat *rotation = nullptr,
    ::flatbuffers::Offset<Blender::LiveLink::Mesh> mesh = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Blender::LiveLink::CreateObject(
      _fbb,
      name__,
      unique_id,
      visibility,
      location,
      scale,
      rotation,
      mesh);
}

struct Update FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UpdateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Blender::LiveLink::Object>> *objects() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Blender::LiveLink::Object>> *>(VT_OBJECTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECTS) &&
           verifier.VerifyVector(objects()) &&
           verifier.VerifyVectorOfTables(objects()) &&
           verifier.EndTable();
  }
};

struct UpdateBuilder {
  typedef Update Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_objects(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Blender::LiveLink::Object>>> objects) {
    fbb_.AddOffset(Update::VT_OBJECTS, objects);
  }
  explicit UpdateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Update> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Update>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Update> CreateUpdate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Blender::LiveLink::Object>>> objects = 0) {
  UpdateBuilder builder_(_fbb);
  builder_.add_objects(objects);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Update> CreateUpdateDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Blender::LiveLink::Object>> *objects = nullptr) {
  auto objects__ = objects ? _fbb.CreateVector<::flatbuffers::Offset<Blender::LiveLink::Object>>(*objects) : 0;
  return Blender::LiveLink::CreateUpdate(
      _fbb,
      objects__);
}

inline const Blender::LiveLink::Update *GetUpdate(const void *buf) {
  return ::flatbuffers::GetRoot<Blender::LiveLink::Update>(buf);
}

inline const Blender::LiveLink::Update *GetSizePrefixedUpdate(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Blender::LiveLink::Update>(buf);
}

inline bool VerifyUpdateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Blender::LiveLink::Update>(nullptr);
}

inline bool VerifySizePrefixedUpdateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Blender::LiveLink::Update>(nullptr);
}

inline void FinishUpdateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Blender::LiveLink::Update> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUpdateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Blender::LiveLink::Update> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace LiveLink
}  // namespace Blender

#endif  // FLATBUFFERS_GENERATED_BLENDERLIVELINK_BLENDER_LIVELINK_H_
