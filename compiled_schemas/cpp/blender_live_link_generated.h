// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BLENDERLIVELINK_BLENDER_LIVELINK_H_
#define FLATBUFFERS_GENERATED_BLENDERLIVELINK_BLENDER_LIVELINK_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace Blender {
namespace LiveLink {

struct Vec2;

struct Vec3;

struct Vec4;

struct Quat;

struct Mesh;
struct MeshBuilder;

struct RigidBody;

struct PointLight;

struct SpotLight;

struct SunLight;

struct Light;
struct LightBuilder;

struct GameplayComponentCharacter;
struct GameplayComponentCharacterBuilder;

struct GameplayComponentCameraControl;
struct GameplayComponentCameraControlBuilder;

struct GameplayComponentContainer;
struct GameplayComponentContainerBuilder;

struct Object;
struct ObjectBuilder;

struct Material;
struct MaterialBuilder;

struct Update;
struct UpdateBuilder;

enum LightType : int8_t {
  LightType_Point = 0,
  LightType_Spot = 1,
  LightType_Sun = 2,
  LightType_Area = 3,
  LightType_MIN = LightType_Point,
  LightType_MAX = LightType_Area
};

inline const LightType (&EnumValuesLightType())[4] {
  static const LightType values[] = {
    LightType_Point,
    LightType_Spot,
    LightType_Sun,
    LightType_Area
  };
  return values;
}

inline const char * const *EnumNamesLightType() {
  static const char * const names[5] = {
    "Point",
    "Spot",
    "Sun",
    "Area",
    nullptr
  };
  return names;
}

inline const char *EnumNameLightType(LightType e) {
  if (::flatbuffers::IsOutRange(e, LightType_Point, LightType_Area)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLightType()[index];
}

enum GameplayComponent : uint8_t {
  GameplayComponent_NONE = 0,
  GameplayComponent_GameplayComponentCharacter = 1,
  GameplayComponent_GameplayComponentCameraControl = 2,
  GameplayComponent_MIN = GameplayComponent_NONE,
  GameplayComponent_MAX = GameplayComponent_GameplayComponentCameraControl
};

inline const GameplayComponent (&EnumValuesGameplayComponent())[3] {
  static const GameplayComponent values[] = {
    GameplayComponent_NONE,
    GameplayComponent_GameplayComponentCharacter,
    GameplayComponent_GameplayComponentCameraControl
  };
  return values;
}

inline const char * const *EnumNamesGameplayComponent() {
  static const char * const names[4] = {
    "NONE",
    "GameplayComponentCharacter",
    "GameplayComponentCameraControl",
    nullptr
  };
  return names;
}

inline const char *EnumNameGameplayComponent(GameplayComponent e) {
  if (::flatbuffers::IsOutRange(e, GameplayComponent_NONE, GameplayComponent_GameplayComponentCameraControl)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGameplayComponent()[index];
}

template<typename T> struct GameplayComponentTraits {
  static const GameplayComponent enum_value = GameplayComponent_NONE;
};

template<> struct GameplayComponentTraits<Blender::LiveLink::GameplayComponentCharacter> {
  static const GameplayComponent enum_value = GameplayComponent_GameplayComponentCharacter;
};

template<> struct GameplayComponentTraits<Blender::LiveLink::GameplayComponentCameraControl> {
  static const GameplayComponent enum_value = GameplayComponent_GameplayComponentCameraControl;
};

bool VerifyGameplayComponent(::flatbuffers::Verifier &verifier, const void *obj, GameplayComponent type);
bool VerifyGameplayComponentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  Vec2()
      : x_(0),
        y_(0) {
  }
  Vec2(float _x, float _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Vec2, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec4 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;
  float w_;

 public:
  Vec4()
      : x_(0),
        y_(0),
        z_(0),
        w_(0) {
  }
  Vec4(float _x, float _y, float _z, float _w)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)),
        w_(::flatbuffers::EndianScalar(_w)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
  float w() const {
    return ::flatbuffers::EndianScalar(w_);
  }
};
FLATBUFFERS_STRUCT_END(Vec4, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Quat FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;
  float w_;

 public:
  Quat()
      : x_(0),
        y_(0),
        z_(0),
        w_(0) {
  }
  Quat(float _x, float _y, float _z, float _w)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)),
        w_(::flatbuffers::EndianScalar(_w)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
  float w() const {
    return ::flatbuffers::EndianScalar(w_);
  }
};
FLATBUFFERS_STRUCT_END(Quat, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) RigidBody FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t is_dynamic_;
  int8_t padding0__;  int16_t padding1__;
  float mass_;

 public:
  RigidBody()
      : is_dynamic_(0),
        padding0__(0),
        padding1__(0),
        mass_(0) {
    (void)padding0__;
    (void)padding1__;
  }
  RigidBody(bool _is_dynamic, float _mass)
      : is_dynamic_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_is_dynamic))),
        padding0__(0),
        padding1__(0),
        mass_(::flatbuffers::EndianScalar(_mass)) {
    (void)padding0__;
    (void)padding1__;
  }
  bool is_dynamic() const {
    return ::flatbuffers::EndianScalar(is_dynamic_) != 0;
  }
  float mass() const {
    return ::flatbuffers::EndianScalar(mass_);
  }
};
FLATBUFFERS_STRUCT_END(RigidBody, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) PointLight FLATBUFFERS_FINAL_CLASS {
 private:
  float power_;

 public:
  PointLight()
      : power_(0) {
  }
  PointLight(float _power)
      : power_(::flatbuffers::EndianScalar(_power)) {
  }
  float power() const {
    return ::flatbuffers::EndianScalar(power_);
  }
};
FLATBUFFERS_STRUCT_END(PointLight, 4);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) SpotLight FLATBUFFERS_FINAL_CLASS {
 private:
  float power_;
  float beam_angle_;
  float edge_blend_;

 public:
  SpotLight()
      : power_(0),
        beam_angle_(0),
        edge_blend_(0) {
  }
  SpotLight(float _power, float _beam_angle, float _edge_blend)
      : power_(::flatbuffers::EndianScalar(_power)),
        beam_angle_(::flatbuffers::EndianScalar(_beam_angle)),
        edge_blend_(::flatbuffers::EndianScalar(_edge_blend)) {
  }
  float power() const {
    return ::flatbuffers::EndianScalar(power_);
  }
  float beam_angle() const {
    return ::flatbuffers::EndianScalar(beam_angle_);
  }
  float edge_blend() const {
    return ::flatbuffers::EndianScalar(edge_blend_);
  }
};
FLATBUFFERS_STRUCT_END(SpotLight, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) SunLight FLATBUFFERS_FINAL_CLASS {
 private:
  float power_;
  uint8_t cast_shadows_;
  int8_t padding0__;  int16_t padding1__;

 public:
  SunLight()
      : power_(0),
        cast_shadows_(0),
        padding0__(0),
        padding1__(0) {
    (void)padding0__;
    (void)padding1__;
  }
  SunLight(float _power, bool _cast_shadows)
      : power_(::flatbuffers::EndianScalar(_power)),
        cast_shadows_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_cast_shadows))),
        padding0__(0),
        padding1__(0) {
    (void)padding0__;
    (void)padding1__;
  }
  float power() const {
    return ::flatbuffers::EndianScalar(power_);
  }
  bool cast_shadows() const {
    return ::flatbuffers::EndianScalar(cast_shadows_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(SunLight, 8);

struct Mesh FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MeshBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITIONS = 4,
    VT_NORMALS = 6,
    VT_INDICES = 8,
    VT_MATERIAL_IDS = 10
  };
  const ::flatbuffers::Vector<float> *positions() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_POSITIONS);
  }
  const ::flatbuffers::Vector<float> *normals() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_NORMALS);
  }
  const ::flatbuffers::Vector<uint32_t> *indices() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_INDICES);
  }
  const ::flatbuffers::Vector<int32_t> *material_ids() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_MATERIAL_IDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITIONS) &&
           verifier.VerifyVector(positions()) &&
           VerifyOffset(verifier, VT_NORMALS) &&
           verifier.VerifyVector(normals()) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           VerifyOffset(verifier, VT_MATERIAL_IDS) &&
           verifier.VerifyVector(material_ids()) &&
           verifier.EndTable();
  }
};

struct MeshBuilder {
  typedef Mesh Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_positions(::flatbuffers::Offset<::flatbuffers::Vector<float>> positions) {
    fbb_.AddOffset(Mesh::VT_POSITIONS, positions);
  }
  void add_normals(::flatbuffers::Offset<::flatbuffers::Vector<float>> normals) {
    fbb_.AddOffset(Mesh::VT_NORMALS, normals);
  }
  void add_indices(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices) {
    fbb_.AddOffset(Mesh::VT_INDICES, indices);
  }
  void add_material_ids(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> material_ids) {
    fbb_.AddOffset(Mesh::VT_MATERIAL_IDS, material_ids);
  }
  explicit MeshBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Mesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Mesh>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Mesh> CreateMesh(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> positions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> normals = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> material_ids = 0) {
  MeshBuilder builder_(_fbb);
  builder_.add_material_ids(material_ids);
  builder_.add_indices(indices);
  builder_.add_normals(normals);
  builder_.add_positions(positions);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Mesh> CreateMeshDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *positions = nullptr,
    const std::vector<float> *normals = nullptr,
    const std::vector<uint32_t> *indices = nullptr,
    const std::vector<int32_t> *material_ids = nullptr) {
  auto positions__ = positions ? _fbb.CreateVector<float>(*positions) : 0;
  auto normals__ = normals ? _fbb.CreateVector<float>(*normals) : 0;
  auto indices__ = indices ? _fbb.CreateVector<uint32_t>(*indices) : 0;
  auto material_ids__ = material_ids ? _fbb.CreateVector<int32_t>(*material_ids) : 0;
  return Blender::LiveLink::CreateMesh(
      _fbb,
      positions__,
      normals__,
      indices__,
      material_ids__);
}

struct Light FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LightBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_COLOR = 6,
    VT_USE_SHADOW = 8,
    VT_POINT_LIGHT = 10,
    VT_SPOT_LIGHT = 12,
    VT_SUN_LIGHT = 14
  };
  Blender::LiveLink::LightType type() const {
    return static_cast<Blender::LiveLink::LightType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const Blender::LiveLink::Vec3 *color() const {
    return GetStruct<const Blender::LiveLink::Vec3 *>(VT_COLOR);
  }
  bool use_shadow() const {
    return GetField<uint8_t>(VT_USE_SHADOW, 0) != 0;
  }
  const Blender::LiveLink::PointLight *point_light() const {
    return GetStruct<const Blender::LiveLink::PointLight *>(VT_POINT_LIGHT);
  }
  const Blender::LiveLink::SpotLight *spot_light() const {
    return GetStruct<const Blender::LiveLink::SpotLight *>(VT_SPOT_LIGHT);
  }
  const Blender::LiveLink::SunLight *sun_light() const {
    return GetStruct<const Blender::LiveLink::SunLight *>(VT_SUN_LIGHT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<Blender::LiveLink::Vec3>(verifier, VT_COLOR, 4) &&
           VerifyField<uint8_t>(verifier, VT_USE_SHADOW, 1) &&
           VerifyField<Blender::LiveLink::PointLight>(verifier, VT_POINT_LIGHT, 4) &&
           VerifyField<Blender::LiveLink::SpotLight>(verifier, VT_SPOT_LIGHT, 4) &&
           VerifyField<Blender::LiveLink::SunLight>(verifier, VT_SUN_LIGHT, 4) &&
           verifier.EndTable();
  }
};

struct LightBuilder {
  typedef Light Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(Blender::LiveLink::LightType type) {
    fbb_.AddElement<int8_t>(Light::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_color(const Blender::LiveLink::Vec3 *color) {
    fbb_.AddStruct(Light::VT_COLOR, color);
  }
  void add_use_shadow(bool use_shadow) {
    fbb_.AddElement<uint8_t>(Light::VT_USE_SHADOW, static_cast<uint8_t>(use_shadow), 0);
  }
  void add_point_light(const Blender::LiveLink::PointLight *point_light) {
    fbb_.AddStruct(Light::VT_POINT_LIGHT, point_light);
  }
  void add_spot_light(const Blender::LiveLink::SpotLight *spot_light) {
    fbb_.AddStruct(Light::VT_SPOT_LIGHT, spot_light);
  }
  void add_sun_light(const Blender::LiveLink::SunLight *sun_light) {
    fbb_.AddStruct(Light::VT_SUN_LIGHT, sun_light);
  }
  explicit LightBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Light> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Light>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Light> CreateLight(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Blender::LiveLink::LightType type = Blender::LiveLink::LightType_Point,
    const Blender::LiveLink::Vec3 *color = nullptr,
    bool use_shadow = false,
    const Blender::LiveLink::PointLight *point_light = nullptr,
    const Blender::LiveLink::SpotLight *spot_light = nullptr,
    const Blender::LiveLink::SunLight *sun_light = nullptr) {
  LightBuilder builder_(_fbb);
  builder_.add_sun_light(sun_light);
  builder_.add_spot_light(spot_light);
  builder_.add_point_light(point_light);
  builder_.add_color(color);
  builder_.add_use_shadow(use_shadow);
  builder_.add_type(type);
  return builder_.Finish();
}

struct GameplayComponentCharacter FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameplayComponentCharacterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_CONTROLLED = 4,
    VT_MOVE_SPEED = 6,
    VT_JUMP_SPEED = 8
  };
  bool player_controlled() const {
    return GetField<uint8_t>(VT_PLAYER_CONTROLLED, 0) != 0;
  }
  float move_speed() const {
    return GetField<float>(VT_MOVE_SPEED, 0.0f);
  }
  float jump_speed() const {
    return GetField<float>(VT_JUMP_SPEED, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PLAYER_CONTROLLED, 1) &&
           VerifyField<float>(verifier, VT_MOVE_SPEED, 4) &&
           VerifyField<float>(verifier, VT_JUMP_SPEED, 4) &&
           verifier.EndTable();
  }
};

struct GameplayComponentCharacterBuilder {
  typedef GameplayComponentCharacter Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_controlled(bool player_controlled) {
    fbb_.AddElement<uint8_t>(GameplayComponentCharacter::VT_PLAYER_CONTROLLED, static_cast<uint8_t>(player_controlled), 0);
  }
  void add_move_speed(float move_speed) {
    fbb_.AddElement<float>(GameplayComponentCharacter::VT_MOVE_SPEED, move_speed, 0.0f);
  }
  void add_jump_speed(float jump_speed) {
    fbb_.AddElement<float>(GameplayComponentCharacter::VT_JUMP_SPEED, jump_speed, 0.0f);
  }
  explicit GameplayComponentCharacterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameplayComponentCharacter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameplayComponentCharacter>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameplayComponentCharacter> CreateGameplayComponentCharacter(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool player_controlled = false,
    float move_speed = 0.0f,
    float jump_speed = 0.0f) {
  GameplayComponentCharacterBuilder builder_(_fbb);
  builder_.add_jump_speed(jump_speed);
  builder_.add_move_speed(move_speed);
  builder_.add_player_controlled(player_controlled);
  return builder_.Finish();
}

struct GameplayComponentCameraControl FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameplayComponentCameraControlBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FOLLOW_DISTANCE = 4,
    VT_FOLLOW_SPEED = 6
  };
  float follow_distance() const {
    return GetField<float>(VT_FOLLOW_DISTANCE, 0.0f);
  }
  float follow_speed() const {
    return GetField<float>(VT_FOLLOW_SPEED, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_FOLLOW_DISTANCE, 4) &&
           VerifyField<float>(verifier, VT_FOLLOW_SPEED, 4) &&
           verifier.EndTable();
  }
};

struct GameplayComponentCameraControlBuilder {
  typedef GameplayComponentCameraControl Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_follow_distance(float follow_distance) {
    fbb_.AddElement<float>(GameplayComponentCameraControl::VT_FOLLOW_DISTANCE, follow_distance, 0.0f);
  }
  void add_follow_speed(float follow_speed) {
    fbb_.AddElement<float>(GameplayComponentCameraControl::VT_FOLLOW_SPEED, follow_speed, 0.0f);
  }
  explicit GameplayComponentCameraControlBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameplayComponentCameraControl> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameplayComponentCameraControl>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameplayComponentCameraControl> CreateGameplayComponentCameraControl(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float follow_distance = 0.0f,
    float follow_speed = 0.0f) {
  GameplayComponentCameraControlBuilder builder_(_fbb);
  builder_.add_follow_speed(follow_speed);
  builder_.add_follow_distance(follow_distance);
  return builder_.Finish();
}

struct GameplayComponentContainer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameplayComponentContainerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE_TYPE = 4,
    VT_VALUE = 6
  };
  Blender::LiveLink::GameplayComponent value_type() const {
    return static_cast<Blender::LiveLink::GameplayComponent>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const Blender::LiveLink::GameplayComponentCharacter *value_as_GameplayComponentCharacter() const {
    return value_type() == Blender::LiveLink::GameplayComponent_GameplayComponentCharacter ? static_cast<const Blender::LiveLink::GameplayComponentCharacter *>(value()) : nullptr;
  }
  const Blender::LiveLink::GameplayComponentCameraControl *value_as_GameplayComponentCameraControl() const {
    return value_type() == Blender::LiveLink::GameplayComponent_GameplayComponentCameraControl ? static_cast<const Blender::LiveLink::GameplayComponentCameraControl *>(value()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyGameplayComponent(verifier, value(), value_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Blender::LiveLink::GameplayComponentCharacter *GameplayComponentContainer::value_as<Blender::LiveLink::GameplayComponentCharacter>() const {
  return value_as_GameplayComponentCharacter();
}

template<> inline const Blender::LiveLink::GameplayComponentCameraControl *GameplayComponentContainer::value_as<Blender::LiveLink::GameplayComponentCameraControl>() const {
  return value_as_GameplayComponentCameraControl();
}

struct GameplayComponentContainerBuilder {
  typedef GameplayComponentContainer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value_type(Blender::LiveLink::GameplayComponent value_type) {
    fbb_.AddElement<uint8_t>(GameplayComponentContainer::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(::flatbuffers::Offset<void> value) {
    fbb_.AddOffset(GameplayComponentContainer::VT_VALUE, value);
  }
  explicit GameplayComponentContainerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameplayComponentContainer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameplayComponentContainer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameplayComponentContainer> CreateGameplayComponentContainer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Blender::LiveLink::GameplayComponent value_type = Blender::LiveLink::GameplayComponent_NONE,
    ::flatbuffers::Offset<void> value = 0) {
  GameplayComponentContainerBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

struct Object FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_UNIQUE_ID = 6,
    VT_VISIBILITY = 8,
    VT_LOCATION = 10,
    VT_SCALE = 12,
    VT_ROTATION = 14,
    VT_MESH = 16,
    VT_RIGID_BODY = 18,
    VT_LIGHT = 20,
    VT_COMPONENTS = 22
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int32_t unique_id() const {
    return GetField<int32_t>(VT_UNIQUE_ID, 0);
  }
  bool visibility() const {
    return GetField<uint8_t>(VT_VISIBILITY, 0) != 0;
  }
  const Blender::LiveLink::Vec3 *location() const {
    return GetStruct<const Blender::LiveLink::Vec3 *>(VT_LOCATION);
  }
  const Blender::LiveLink::Vec3 *scale() const {
    return GetStruct<const Blender::LiveLink::Vec3 *>(VT_SCALE);
  }
  const Blender::LiveLink::Quat *rotation() const {
    return GetStruct<const Blender::LiveLink::Quat *>(VT_ROTATION);
  }
  const Blender::LiveLink::Mesh *mesh() const {
    return GetPointer<const Blender::LiveLink::Mesh *>(VT_MESH);
  }
  const Blender::LiveLink::RigidBody *rigid_body() const {
    return GetStruct<const Blender::LiveLink::RigidBody *>(VT_RIGID_BODY);
  }
  const Blender::LiveLink::Light *light() const {
    return GetPointer<const Blender::LiveLink::Light *>(VT_LIGHT);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Blender::LiveLink::GameplayComponentContainer>> *components() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Blender::LiveLink::GameplayComponentContainer>> *>(VT_COMPONENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_UNIQUE_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_VISIBILITY, 1) &&
           VerifyField<Blender::LiveLink::Vec3>(verifier, VT_LOCATION, 4) &&
           VerifyField<Blender::LiveLink::Vec3>(verifier, VT_SCALE, 4) &&
           VerifyField<Blender::LiveLink::Quat>(verifier, VT_ROTATION, 4) &&
           VerifyOffset(verifier, VT_MESH) &&
           verifier.VerifyTable(mesh()) &&
           VerifyField<Blender::LiveLink::RigidBody>(verifier, VT_RIGID_BODY, 4) &&
           VerifyOffset(verifier, VT_LIGHT) &&
           verifier.VerifyTable(light()) &&
           VerifyOffset(verifier, VT_COMPONENTS) &&
           verifier.VerifyVector(components()) &&
           verifier.VerifyVectorOfTables(components()) &&
           verifier.EndTable();
  }
};

struct ObjectBuilder {
  typedef Object Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Object::VT_NAME, name);
  }
  void add_unique_id(int32_t unique_id) {
    fbb_.AddElement<int32_t>(Object::VT_UNIQUE_ID, unique_id, 0);
  }
  void add_visibility(bool visibility) {
    fbb_.AddElement<uint8_t>(Object::VT_VISIBILITY, static_cast<uint8_t>(visibility), 0);
  }
  void add_location(const Blender::LiveLink::Vec3 *location) {
    fbb_.AddStruct(Object::VT_LOCATION, location);
  }
  void add_scale(const Blender::LiveLink::Vec3 *scale) {
    fbb_.AddStruct(Object::VT_SCALE, scale);
  }
  void add_rotation(const Blender::LiveLink::Quat *rotation) {
    fbb_.AddStruct(Object::VT_ROTATION, rotation);
  }
  void add_mesh(::flatbuffers::Offset<Blender::LiveLink::Mesh> mesh) {
    fbb_.AddOffset(Object::VT_MESH, mesh);
  }
  void add_rigid_body(const Blender::LiveLink::RigidBody *rigid_body) {
    fbb_.AddStruct(Object::VT_RIGID_BODY, rigid_body);
  }
  void add_light(::flatbuffers::Offset<Blender::LiveLink::Light> light) {
    fbb_.AddOffset(Object::VT_LIGHT, light);
  }
  void add_components(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Blender::LiveLink::GameplayComponentContainer>>> components) {
    fbb_.AddOffset(Object::VT_COMPONENTS, components);
  }
  explicit ObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Object> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Object>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Object> CreateObject(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int32_t unique_id = 0,
    bool visibility = false,
    const Blender::LiveLink::Vec3 *location = nullptr,
    const Blender::LiveLink::Vec3 *scale = nullptr,
    const Blender::LiveLink::Quat *rotation = nullptr,
    ::flatbuffers::Offset<Blender::LiveLink::Mesh> mesh = 0,
    const Blender::LiveLink::RigidBody *rigid_body = nullptr,
    ::flatbuffers::Offset<Blender::LiveLink::Light> light = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Blender::LiveLink::GameplayComponentContainer>>> components = 0) {
  ObjectBuilder builder_(_fbb);
  builder_.add_components(components);
  builder_.add_light(light);
  builder_.add_rigid_body(rigid_body);
  builder_.add_mesh(mesh);
  builder_.add_rotation(rotation);
  builder_.add_scale(scale);
  builder_.add_location(location);
  builder_.add_unique_id(unique_id);
  builder_.add_name(name);
  builder_.add_visibility(visibility);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Object> CreateObjectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t unique_id = 0,
    bool visibility = false,
    const Blender::LiveLink::Vec3 *location = nullptr,
    const Blender::LiveLink::Vec3 *scale = nullptr,
    const Blender::LiveLink::Quat *rotation = nullptr,
    ::flatbuffers::Offset<Blender::LiveLink::Mesh> mesh = 0,
    const Blender::LiveLink::RigidBody *rigid_body = nullptr,
    ::flatbuffers::Offset<Blender::LiveLink::Light> light = 0,
    const std::vector<::flatbuffers::Offset<Blender::LiveLink::GameplayComponentContainer>> *components = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto components__ = components ? _fbb.CreateVector<::flatbuffers::Offset<Blender::LiveLink::GameplayComponentContainer>>(*components) : 0;
  return Blender::LiveLink::CreateObject(
      _fbb,
      name__,
      unique_id,
      visibility,
      location,
      scale,
      rotation,
      mesh,
      rigid_body,
      light,
      components__);
}

struct Material FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MaterialBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNIQUE_ID = 4,
    VT_BASE_COLOR = 6,
    VT_METALLIC = 8,
    VT_ROUGHNESS = 10
  };
  int32_t unique_id() const {
    return GetField<int32_t>(VT_UNIQUE_ID, 0);
  }
  const Blender::LiveLink::Vec4 *base_color() const {
    return GetStruct<const Blender::LiveLink::Vec4 *>(VT_BASE_COLOR);
  }
  float metallic() const {
    return GetField<float>(VT_METALLIC, 0.0f);
  }
  float roughness() const {
    return GetField<float>(VT_ROUGHNESS, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_UNIQUE_ID, 4) &&
           VerifyField<Blender::LiveLink::Vec4>(verifier, VT_BASE_COLOR, 4) &&
           VerifyField<float>(verifier, VT_METALLIC, 4) &&
           VerifyField<float>(verifier, VT_ROUGHNESS, 4) &&
           verifier.EndTable();
  }
};

struct MaterialBuilder {
  typedef Material Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_unique_id(int32_t unique_id) {
    fbb_.AddElement<int32_t>(Material::VT_UNIQUE_ID, unique_id, 0);
  }
  void add_base_color(const Blender::LiveLink::Vec4 *base_color) {
    fbb_.AddStruct(Material::VT_BASE_COLOR, base_color);
  }
  void add_metallic(float metallic) {
    fbb_.AddElement<float>(Material::VT_METALLIC, metallic, 0.0f);
  }
  void add_roughness(float roughness) {
    fbb_.AddElement<float>(Material::VT_ROUGHNESS, roughness, 0.0f);
  }
  explicit MaterialBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Material> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Material>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Material> CreateMaterial(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t unique_id = 0,
    const Blender::LiveLink::Vec4 *base_color = nullptr,
    float metallic = 0.0f,
    float roughness = 0.0f) {
  MaterialBuilder builder_(_fbb);
  builder_.add_roughness(roughness);
  builder_.add_metallic(metallic);
  builder_.add_base_color(base_color);
  builder_.add_unique_id(unique_id);
  return builder_.Finish();
}

struct Update FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UpdateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECTS = 4,
    VT_DELETED_OBJECT_UIDS = 6,
    VT_RESET = 8
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Blender::LiveLink::Object>> *objects() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Blender::LiveLink::Object>> *>(VT_OBJECTS);
  }
  const ::flatbuffers::Vector<int32_t> *deleted_object_uids() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_DELETED_OBJECT_UIDS);
  }
  bool reset() const {
    return GetField<uint8_t>(VT_RESET, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECTS) &&
           verifier.VerifyVector(objects()) &&
           verifier.VerifyVectorOfTables(objects()) &&
           VerifyOffset(verifier, VT_DELETED_OBJECT_UIDS) &&
           verifier.VerifyVector(deleted_object_uids()) &&
           VerifyField<uint8_t>(verifier, VT_RESET, 1) &&
           verifier.EndTable();
  }
};

struct UpdateBuilder {
  typedef Update Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_objects(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Blender::LiveLink::Object>>> objects) {
    fbb_.AddOffset(Update::VT_OBJECTS, objects);
  }
  void add_deleted_object_uids(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> deleted_object_uids) {
    fbb_.AddOffset(Update::VT_DELETED_OBJECT_UIDS, deleted_object_uids);
  }
  void add_reset(bool reset) {
    fbb_.AddElement<uint8_t>(Update::VT_RESET, static_cast<uint8_t>(reset), 0);
  }
  explicit UpdateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Update> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Update>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Update> CreateUpdate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Blender::LiveLink::Object>>> objects = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> deleted_object_uids = 0,
    bool reset = false) {
  UpdateBuilder builder_(_fbb);
  builder_.add_deleted_object_uids(deleted_object_uids);
  builder_.add_objects(objects);
  builder_.add_reset(reset);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Update> CreateUpdateDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Blender::LiveLink::Object>> *objects = nullptr,
    const std::vector<int32_t> *deleted_object_uids = nullptr,
    bool reset = false) {
  auto objects__ = objects ? _fbb.CreateVector<::flatbuffers::Offset<Blender::LiveLink::Object>>(*objects) : 0;
  auto deleted_object_uids__ = deleted_object_uids ? _fbb.CreateVector<int32_t>(*deleted_object_uids) : 0;
  return Blender::LiveLink::CreateUpdate(
      _fbb,
      objects__,
      deleted_object_uids__,
      reset);
}

inline bool VerifyGameplayComponent(::flatbuffers::Verifier &verifier, const void *obj, GameplayComponent type) {
  switch (type) {
    case GameplayComponent_NONE: {
      return true;
    }
    case GameplayComponent_GameplayComponentCharacter: {
      auto ptr = reinterpret_cast<const Blender::LiveLink::GameplayComponentCharacter *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GameplayComponent_GameplayComponentCameraControl: {
      auto ptr = reinterpret_cast<const Blender::LiveLink::GameplayComponentCameraControl *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyGameplayComponentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyGameplayComponent(
        verifier,  values->Get(i), types->GetEnum<GameplayComponent>(i))) {
      return false;
    }
  }
  return true;
}

inline const Blender::LiveLink::Update *GetUpdate(const void *buf) {
  return ::flatbuffers::GetRoot<Blender::LiveLink::Update>(buf);
}

inline const Blender::LiveLink::Update *GetSizePrefixedUpdate(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Blender::LiveLink::Update>(buf);
}

inline bool VerifyUpdateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Blender::LiveLink::Update>(nullptr);
}

inline bool VerifySizePrefixedUpdateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Blender::LiveLink::Update>(nullptr);
}

inline void FinishUpdateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Blender::LiveLink::Update> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUpdateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Blender::LiveLink::Update> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace LiveLink
}  // namespace Blender

#endif  // FLATBUFFERS_GENERATED_BLENDERLIVELINK_BLENDER_LIVELINK_H_
