# automatically generated by the FlatBuffers compiler, do not modify

# namespace: LiveLink

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Light(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Light()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLight(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Light
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Light
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Light
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from Blender.LiveLink.Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Light
    def UseShadow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Light
    def PointLight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from Blender.LiveLink.PointLight import PointLight
            obj = PointLight()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Light
    def SpotLight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from Blender.LiveLink.SpotLight import SpotLight
            obj = SpotLight()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Light
    def SunLight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from Blender.LiveLink.SunLight import SunLight
            obj = SunLight()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def LightStart(builder):
    builder.StartObject(6)

def Start(builder):
    LightStart(builder)

def LightAddType(builder, type):
    builder.PrependInt8Slot(0, type, 0)

def AddType(builder, type):
    LightAddType(builder, type)

def LightAddColor(builder, color):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def AddColor(builder, color):
    LightAddColor(builder, color)

def LightAddUseShadow(builder, useShadow):
    builder.PrependBoolSlot(2, useShadow, 0)

def AddUseShadow(builder, useShadow):
    LightAddUseShadow(builder, useShadow)

def LightAddPointLight(builder, pointLight):
    builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(pointLight), 0)

def AddPointLight(builder, pointLight):
    LightAddPointLight(builder, pointLight)

def LightAddSpotLight(builder, spotLight):
    builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(spotLight), 0)

def AddSpotLight(builder, spotLight):
    LightAddSpotLight(builder, spotLight)

def LightAddSunLight(builder, sunLight):
    builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(sunLight), 0)

def AddSunLight(builder, sunLight):
    LightAddSunLight(builder, sunLight)

def LightEnd(builder):
    return builder.EndObject()

def End(builder):
    return LightEnd(builder)
