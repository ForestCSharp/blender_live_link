# automatically generated by the FlatBuffers compiler, do not modify

# namespace: LiveLink

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Object(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Object()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObject(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Object
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Object
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Object
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from Blender.LiveLink.Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Object
    def Mesh(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Blender.LiveLink.Mesh import Mesh
            obj = Mesh()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ObjectStart(builder):
    builder.StartObject(3)

def Start(builder):
    ObjectStart(builder)

def ObjectAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    ObjectAddName(builder, name)

def ObjectAddLocation(builder, location):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)

def AddLocation(builder, location):
    ObjectAddLocation(builder, location)

def ObjectAddMesh(builder, mesh):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mesh), 0)

def AddMesh(builder, mesh):
    ObjectAddMesh(builder, mesh)

def ObjectEnd(builder):
    return builder.EndObject()

def End(builder):
    return ObjectEnd(builder)
